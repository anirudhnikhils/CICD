pipeline {
    agent any

    environment {
        REGISTRY_CREDENTIALS = credentials('docker-cred')
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'Checking out the repository'
                cleanWs()
                checkout([$class: 'GitSCM',
                    branches: [[name: 'main']],
                    userRemoteConfigs: [[url: 'https://github.com/anirudhnikhils/CICD']]
                ])
            }
        }

        stage('Verify Dockerfile') {
            steps {
                dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
                    echo 'Verifying Dockerfile exists'
                    bat 'dir Dockerfile'
                }
            }
        }

   stage('Build and Test') {
      steps {
        sh 'ls -ltr'
        // build the project and create a JAR file
        sh 'cd java-maven-sonar-argocd-helm-k8s/spring-boot-app && mvn clean package'
      }
    }

        stage('Build and Package') {
            steps {
                dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
                    echo 'Building and Packaging the application'
                    bat 'docker build -t your-app-image1:latest -f Dockerfile .'
                }
            }
        }

        stage('Docker Login and Push') {
            steps {
                echo 'Logging in and pushing the Docker image'
                withCredentials([usernamePassword(credentialsId: 'docker-cred', usernameVariable: 'REGISTRY_CREDENTIALS_USR', passwordVariable: 'REGISTRY_CREDENTIALS_PSW')]) {
                    dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
                        bat '''
                            docker login -u %REGISTRY_CREDENTIALS_USR% -p %REGISTRY_CREDENTIALS_PSW%
                            docker push your-app-image1:latest
                        '''
                    }
                }
            }
        }
    }
}
