pipeline {
    agent any

    environment {
        REGISTRY_CREDENTIALS = credentials('docker-cred')
    }

    stages {
        stage('Checkout') {
            steps {
                script {
                    echo 'Checkout stage passed'
                    checkout([$class: 'GitSCM',
                        branches: [[name: 'main']],
                        userRemoteConfigs: [[url: 'https://github.com/anirudhnikhils/CICD']]
                    ])
                    dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
                        script {
                            echo 'Navigated to spring-boot-app directory'
                        }
                    }
                }
            }
        }
        stage('Verify Dockerfile') {
            steps {
                script {
                    dir('java-maven-sonar-argocd-helm-k8s/spring-boot-app') {
                        echo 'Verifying Dockerfile exists'
                        bat 'if not exist Dockerfile echo Dockerfile not found && exit 1'
                    }
                }
            }
        }
        stage('Build and Package') {
            steps {
                script {
                    dir('abc/spring-boot-app') {
                        echo 'Building and Packaging the application'
                        bat 'docker build -t your-app-image1:latest -f Dockerfile .'
                    }
                }
            }
        }
        stage('Docker Login and Push') {
            steps {
                script {
                    dir('abc/spring-boot-app') {
                        echo 'Logging in and pushing the Docker image'
                        bat """
                            docker login -u ${env.REGISTRY_CREDENTIALS_USR} -p ${env.REGISTRY_CREDENTIALS_PSW}
                            docker push your-app-image1:latest
                        """
                    }
                }
            }
        }
    }
}
